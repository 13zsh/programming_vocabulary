
 (function () { var old = $.fn.contents; $.fn.contents = function () { try { return old.apply(this, arguments); } catch (e) { return $([]); } } })() 
 
 
 
 
 
 
 
 Stack Overflow 
 
 
 
 
 Questions 
 
 
 Developer Jobs 
 
 
 Documentation  beta 
 
 
 Tags 
 
 
 Users 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 current community 
 
 
 
 
 
 
 help 
 chat 
 
 
 
        Stack Overflow
     
 
 
 
 
 
 
 
        Meta Stack Overflow
     
 
 
 
 
 
your communities             
 
 
 
 Sign up  or  log in  to customize your list.
                 
 
 
 more stack exchange communities 
 
 company blog 
 
 
 
 
 
 
 
 
 
 
                            Tour
                             
                                Start here for a quick overview of the site
                             
 
 
 
 
                        Help Center
                         
                            Detailed answers to any questions you might have
                         
 
 
 
 
                                Meta
                                 
                                    Discuss the workings and policies of this site
                                 
 
 
 
 
                                About Us
                                 
                                    Learn more about Stack Overflow the company
                                 
 
 
 
 
                                Business
                                 
                                    Learn more about hiring developers or posting ads with us
                                 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 Log In 
 Sign Up 
 
 
 
 
 
        StackExchange.ready(function () { StackExchange.topbar.init(); });
            StackExchange.scrollPadding.setPaddingTop(60, 10);      
 
 
 
 
 Git 
 
 
 
 
   
 
 
 
 
 dashboard 
 all topics 
 
 
 
 
 
 
 
 
 
 Popular 
 
 
 
 
 
 
 
 
 
 
        StackExchange.ready(function () {
            StackExchange.docs.search.init({
                popularTopicsJson: [{"Id":245,"DocTag":"git","Title":"Ignoring Files and Folders","Url":"/documentation/git/245/ignoring-files-and-folders"},{"Id":218,"DocTag":"git","Title":"Getting started with Git","Url":"/documentation/git/218/getting-started-with-git"},{"Id":415,"DocTag":"git","Title":"Branching","Url":"/documentation/git/415/branching"},{"Id":355,"DocTag":"git","Title":"Rebasing","Url":"/documentation/git/355/rebasing"},{"Id":323,"DocTag":"git","Title":"Committing","Url":"/documentation/git/323/committing"}]
            });
        });
     
   
 
 
 
 Topic 
 
 
 
 
 
 
 You must  sign up  or  log in  to make a topic request. 
 
 
 
 
 
 
 
    StackExchange.ready(function () {
        StackExchange.docs.requestTopic.init('git');
    });
   
 
 
 
 
 
 
 Git Diff   
            All Versions
         
 
 
 
 topic 
 discuss 
 
 
 
 
 Title 
 
 
 
 Versions 
 
 
                        0.99
                     
 
                        1.0
                     
 
                        1.1
                     
 
                        1.2
                     
 
                        1.3
                     
 
                        1.4
                     
 
                        1.5
                     
 
                        1.5.3
                     
 
                        1.6
                     
 
                        1.6.3
                     
 
                        1.6.5
                     
 
                        1.7
                     
 
                        1.7.10
                     
 
                        1.8
                     
 
                        1.8.3
                     
 
                        1.9
                     
 
                        2.0
                     
 
                        2.1
                     
 
                        2.2
                     
 
                        2.3
                     
 
                        2.4
                     
 
                        2.5
                     
 
                        2.6
                     
 
                        2.7
                     
 
                        2.8
                     
 
                        2.9
                     
 
                        2.10
                     
 
                        2.10.2
                     
 
                        2.11
                     
 
                        2.11.1
                     
 
                        2.12
                     
 
                        2.13
                     
 
 
 
 Introduction 
 
 
 
 
 
 
 
 
 
 
   add introduction 
 edit 
 share 
 request improvement 
   edit 
 move 
 delete topic 
 share 
 
 
 
 
 
                var ados = ados || {}; ados.run = ados.run || [];
                ados.run.push(function () { ados_add_placement(22,499571,"adzerk1435752233",4).setZone(29); });
             
 
 
 
 
 This draft deletes the entire topic. 
 
 
 
 
 
 
 
 
                    Examples
                     
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 11 
 
 Show differences in working branch 
 
 
 
 
 
 11 
 
 
 
 
 
   
 git diff
 
 This will show the  unstaged  changes on the current branch from the commit before it. It will only show changes relative to the index, meaning it shows what you  could  add to the next commit, but haven't. To add (stage) these changes, you can use  git add . 
 If a file is staged, but was modified after it was staged,  git diff  will show the differences between the current file and the staged version. 
 
 
 
 
 
 
 
 
 edited  Aug 31 '16 at 9:41 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                    +2
                     
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 9 
 
 Show changes between two commits 
 
 
 
 
 
 9 
 
 
 git diff 1234abc..6789def    # old   new
 
 E.g.: Show the changes made in the last 3 commits: 
 git diff @~3..@    # HEAD -3   HEAD
 
 Note: the two dots (..) is optional, but adds clarity. 
 This will show the textual difference between the commits, regardless of where they are in the tree. 
 
 
 
 
 
 
 
 edited  Oct 13 '16 at 16:22 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
   
 
                var ados = ados || {}; ados.run = ados.run || [];
                ados.run.push(function () { ados_add_placement(22,499571,"adzerk146266304",4).setZone(30); });
             
 
 
   
 
 
 
 
 
 
 
 
 8 
 
 Show differences for staged files 
 
 
 
 
 
 8 
 
 
 git diff --staged
 
 This will show the changes between the previous commit and the currently staged files. 
 NOTE:  You can also use the following commands to accomplish the same thing: 
 git diff --cached
 
 Which is just a synonym for  --staged  or 
 git status -v
 
 Which will trigger the verbose settings of the  status  command. 
 
 
 
 
 
 
 
 edited  Jul 27 '16 at 5:38 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 5 
 
 Comparing branches 
 
 
 
 
 
 5 
 
 
 Show the changes between the tip of  new  and the tip of  original : 
 git diff original new     # equivalent to original..new
 
 Show all changes on  new  since it branched from  original : 
 git diff original...new     # equivalent to $(git merge-base original new)..new
 
 Using only one parameter such as 
 git diff original 
 is equivalent to 
 git diff original..HEAD 
 
 
 
 
 
 
 
 edited  Mar 7 at 21:02 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 3 
 
 Show both staged and unstaged changes 
 
 
 
 
 
 3 
 
 
 To show all staged  and  unstaged changes, use: 
 git diff HEAD
 
 NOTE:  You can also use the following command: 
 git status -vv
 
 The difference being that the output of the latter will actually tell you which changes are staged for commit and which are not. 
 
 
 
 
 
 
 
 edited  Jul 27 '16 at 5:38 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 3 
 
 Show differences for a specific file or directory 
 
 
 
 
 
 3 
 
 
 git diff myfile.txt
 
 Shows the changes between the previous commit of the specified file ( myfile.txt ) and the locally-modified version that has not yet been staged. 
 This also works for directories: 
 git diff documentation
 
 The above shows the changes between the previous commit of all files in the specified directory ( documentation/ ) and the locally-modified versions of these files, that have not yet been staged. 
 To show the difference between some version of a file in a given commit and the local  HEAD  version you can specify the commit you want to compare against: 
 git diff 27fa75e myfile.txt
 
 Or if you want to see the version between two separate commits: 
 git diff 27fa75e ada9b57 myfile.txt
 
 To show the difference between the version specified by the hash  ada9b57  and the latest commit on the branch  my_branchname  for only the relative directory called  my_changed_directory/  you can do this: 
 git diff ada9b57 my_branchname my_changed_directory/
 
 
 
 
 
 
 
 
 edited  Dec 28 '16 at 23:30 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 2 
 
 Viewing a word-diff for long lines 
 
 
 
 
 
 2 
 
 
 git diff [HEAD|--staged...] --word-diff
 
 Rather than displaying lines changed, this will display differences within lines. For example, rather than: 
 -Hello world
+Hello world!
 
 Where the whole line is marked as changed,  word-diff  alters the output to: 
 Hello [-world-]{+world!+}
 
 You can omit the markers  [- ,  -] ,  {+ ,  +}  by specifying  --word-diff=color  or  --color-words . This will only use color coding to mark the difference: 
 
 
 
 
 
 
 
 
 edited  Jul 22 '16 at 18:54 
 
 
 
 
 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 1 
 
 difference between two commit or branch 
 
 
 
 
 
 1 
 
 
 To view difference between two branch 
 git diff <branch1>..<branch2>
 
 To view difference between two branch 
 git diff <commitId1>..<commitId2>
 
 To view diff with current branch 
 git diff <branch/commitId>
 
 To view summary of changes 
 git diff --stat <branch/commitId>
 
 To view files that changed after a certain commit 
 git diff --name-only <commitId>
 
 To view files that are different than a branch 
 git diff --name-only <branchName>
 
 To view files that changed in a folder after a certain commit 
 git diff --name-only <commitId> <folder_path>
 
 
 
 
 
 
 
 
 created  Jul 31 '16 at 21:03 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 1 
 
 Produce a patch-compatible diff 
 
 
 
 
 
 1 
 
 
 Sometimes you just need a diff to apply using patch. The regular  git --diff  does not work. Try this instead: 
 git diff --no-prefix > some_file.patch
 
 Then somewhere else you can reverse it: 
 patch -p0 < some_file.patch
 
 
 
 
 
 
 
 
 created  Jul 23 '16 at 0:38 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 1 
 
 Show differences between current version and last version 
 
 
 
 
 
 1 
 
 
 git diff HEAD^ HEAD
 
 This will show the changes between the previous commit and the current commit. 
 
 
 
 
 
 
 
 created  Jul 22 '16 at 10:27 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 1 
 
 Using meld to see all modifications in the working directory 
 
 
 
 
 
 1 
 
 
 git difftool -t meld --dir-diff
 
 will show the working directory changes. Alternatively, 
 git difftool -t meld --dir-diff  [COMMIT_A] [COMMIT_B]
 
 will show the differences between 2 specific commits. 
 
 
 
 
 
 
 
 created  Jul 21 '16 at 18:34 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 0 
 
 Diff UTF-16 encoded text and binary plist files 
 
 
 
 
 
 0 
 
 
 You can diff UTF-16 encoded files (localization strings file os iOS and macOS are examples) by specifying how git should diff these files. 
 Add the following to your  ~/.gitconfig  file. 
 [diff "utf16"]
textconv = "iconv -f utf-16 -t utf-8"
 
 iconv  is a program to  convert different encodings . 
 Then edit or create a  .gitattributes  file in the root of the repository where you want to use it. Or just edit  ~/.gitattributes . 
 *.strings diff=utf16
 
 This will convert all files ending in  .strings  before git diffs. 
 You can do similar things for other files, that can be converted to text. 
 For binary plist files you edit  .gitconfig 
 [diff "plist"]
textconv = plutil -convert xml1 -o -
 
 and  .gitattributes 
 *.plist diff=plist
 
 
 
 
 
 
 
 
 created  Jul 22 '16 at 10:59 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 -1 
 
 Show changes between two branches 
 
 
 
 
 
 -1 
 
 
 git diff branch1..branch2
 
 
 
 
 
 
 
 
 created  Jul 23 '16 at 0:38 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 -1 
 
 Viewing a three-way merge including the common ancestor 
 
 
 
 
 
 -1 
 
 
 git config --global merge.conflictstyle diff3
 
 Sets the  diff3  style as default: instead of the usual format in conflicted sections, showing the two files: 
 <<<<<<< HEAD
left
=======
right
>>>>>>> master
 
 it will include an additional section containing the original text (coming form the common ancestor): 
 <<<<<<< HEAD
first
second
||||||| 
first
=======
last
>>>>>>> master
 
 This format makes it easier to understand merge-conflict, ie. in this case locally  second  has been added, while remote changed  first  to  last , resolving to: 
 last
second
 
 The same resolution would have been much harder using the default: 
 <<<<<<< HEAD
first
second
=======
last
>>>>>>> master
 
 
 
 
 
 
 
 
 created  Jul 22 '16 at 0:10 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 + 
            Add Example
         
 
 
 
        Please consider making a request to improve this example.
         Request Improvement 
 
 
 
 
 
 Syntax 
 
 git diff [options] [<commit>] [--] [<path>…​] 
 git diff [options] --cached [<commit>] [--] [<path>…​] 
 git diff [options] <commit> <commit> [--] [<path>…​] 
 git diff [options] <blob> <blob> 
 git diff [options] [--no-index] [--] <path> <path> 
 
 
 
 
   edit 
 share 
 
   edit 
 
 
 
 
 
 
 Parameters 
 Parameter Details -p, -u, --patch Generate patch -s, --no-patch Suppress diff output. Useful for commands like  git show  that show the patch by default, or to cancel the effect of  --patch --raw Generate the diff in raw format --diff-algorithm= Choose a diff algorithm. The variants are as follows:  myers ,  minimal ,  patience ,  histogram --summary Output a condensed summary of extended header information such as creations, renames and mode changes --name-only Show only names of changed files --name-status Show names and statuses of changed files The most common statuses are M (Modified), A (Added), and D (Deleted) --check Warn if changes introduce conflict markers or whitespace errors. What are considered whitespace errors is controlled by  core.whitespace  configuration. By default, trailing whitespaces (including lines that solely consist of whitespaces) and a space character that is immediately followed by a tab character inside the initial indent of the line are considered whitespace errors. Exits with non-zero status if problems are found. Not compatible with --exit-code --full-index Instead of the first handful of characters, show the full pre- and post-image blob object names on the "index" line when generating patch format output --binary In addition to  --full-index , output a binary diff that can be applied with  git apply -a, --text Treat all files as text. --color Set the color mode; i.e. use  --color=always  if you would like to pipe a diff to less and keep git's coloring 
 
 
 
   edit 
 share 
 
   edit 
 
 
 
 
 
 
 Remarks 
 
 
 Remarks 
 
 
 
   add remarks 
 
 
 
 
 
 
 
 edited  Mar 7 at 21:02 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                    +19
                     
 
 
   
 
 Still have a question about Git Diff? 
 Ask Question 
 
 
 
 
 Topic Outline 
 
 14 Examples 
 
 
 
 
 Show differences in working branch 
 
 
 Show changes between two commits 
 
 
 Show differences for staged files 
 
 
 Comparing branches 
 
 
 Show both staged and unstaged changes 
 
 
 Show differences for a specific file or directory 
 
 
 Viewing a word-diff for long lines 
 
 
 difference between two commit or branch 
 
 
 Produce a patch-compatible diff 
 
 
 Show differences between current version and last version 
 
 
 Using meld to see all modifications in the working directory 
 
 
 Diff UTF-16 encoded text and binary plist files 
 
 
 Show changes between two branches 
 
 
 Viewing a three-way merge including the common ancestor 
 
 Show more 
 
 Syntax 
 Parameters 
 
 
 
                    Blog
                 
 
 
 
 
   
 
 
 Trends in Government Software Developers 
 
 
 
 
 
 
   
 
 
 Introducing Channels: Private Q&A for Your Team 
 
 
 
 
   
 
                var ados = ados || {}; ados.run = ados.run || [];
                ados.run.push(function () { ados_add_placement(22,499571,"adzerk324157544",5).setZone(56016); });
             
 
 
 
 
        StackExchange.ready(function () { $.get('/documentation/git/ivc/273-636356032283800110:c4ms594qr-x5dbhwn5duxklitze.gif?topicId=273'); });
     
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                    Topic Outline
                         
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 Save Draft 
 Discard 
 
 
 
 
 Sign up or log in 
 Save edit as a guest 
 Join Stack Overflow 
 
 
 
 Using Google 
 
 
 Using Facebook 
 
 
 Using Email and Password 
 
 
 
 
 Name 
 
 
 
 Email 
 
 Save Draft 
 
 
 
 
 We recognize you from another Stack Exchange Network site! 
 Join and Save Draft 
 
 Discard Draft 
 
 
 
 
 
 
 
 
 
 
 
 
 
 Stack Overflow 
 
 Questions 
 Jobs 
 Developer Jobs Directory 
 Documentation 
 Help 
 Mobile 
 
 
 
 Stack Overflow  Business 
 
 Talent 
 Ads 
 Enterprise 
 Insights 
 
 
 
 Company 
 
 About 
 Press 
 Work Here 
 Legal 
 Privacy Policy 
 Contact Us 
 
 
 
 
 
 Stack Exchange  Network 
 
 Technology 
 Life / Arts 
 Culture / Recreation 
 Science 
 Other 
 
 
 
 
 
 Stack Overflow 
 Server Fault 
 Super User 
 Web Applications 
 Ask Ubuntu 
 Webmasters 
 Game Development 
 
 TeX - LaTeX 
 Software Engineering 
 Unix & Linux 
 Ask Different (Apple) 
 WordPress Development 
 Geographic Information Systems 
 Electrical Engineering 
 
 Android Enthusiasts 
 Information Security 
 Database Administrators 
 Drupal Answers 
 SharePoint 
 User Experience 
 Data Science 
 
 Mathematica 
 Salesforce 
 ExpressionEngine® Answers 
 Blender 
 Network Engineering 
 Cryptography 
 Code Review 
 
 Magento 
 Software Recommendations 
 Signal Processing 
 Emacs 
 Raspberry Pi 
 Programming Puzzles & Code Golf 
 Ethereum 
 
 
 
                            more (27)
                         
 
 
 
 
 
 
 Photography 
 Science Fiction & Fantasy 
 Graphic Design 
 Movies & TV 
 Music: Practice & Theory 
 Worldbuilding 
 Seasoned Advice (cooking) 
 
 Home Improvement 
 Personal Finance & Money 
 Academia 
 Law 
 
 
 
                            more (16)
                         
 
 
 
 
 
 
 English Language & Usage 
 Skeptics 
 Mi Yodeya (Judaism) 
 Travel 
 Christianity 
 English Language Learners 
 Japanese Language 
 
 Arqade (gaming) 
 Bicycles 
 Role-playing Games 
 Anime & Manga 
 Puzzling 
 Motor Vehicle Maintenance & Repair 
 
 
 
                            more (32)
                         
 
 
 
 
 
 
 MathOverflow 
 Mathematics 
 Cross Validated (stats) 
 Theoretical Computer Science 
 Physics 
 Chemistry 
 Biology 
 
 Computer Science 
 Philosophy 
 
 
 
                            more (10)
                         
 
 
 
 
 
 
 Meta Stack Exchange 
 Stack Apps 
 API 
 Data 
 Area 51 
 
 
 
 
 
 Blog 
 Facebook 
 Twitter 
 LinkedIn 
 
 
 
                                    site design / logo © 2017 Stack Exchange Inc; user contributions licensed under  cc by-sa 3.0 
                                    with  attribution required .
                                     rev 2017.7.13.1278 
 
 
 
 
 
 
 
 
 Stack Overflow works best with JavaScript enabled
             
 
 
 var z=document.createElement("script");z.type="text/javascript",z.async=!0,z.src="https://static.adzerk.net/ados.js";var s=document.getElementsByTagName("script")[0];s.parentNode.insertBefore(z,s); 
 
var ados = ados || {};
ados.run = ados.run || [];

 
 
            (function(i, s, o, g, r, a, m) {
                i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function() { (i[r].q = i[r].q || []).push(arguments) }, i[r].l = 1 * new Date(); a = s.createElement(o),
                m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m);
            })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');
                ga('create', 'UA-5620270-1');
                ga('create', 'UA-5620270-60', {name: 'pageData', sampleRate: 100 });
                ga('send', 'pageview');
                ga('pageData.send', 'pageview');
        var _qevents = _qevents || [],
            _comscore = _comscore || [];
        (function () {
            var ssl='https:'==document.location.protocol,
                s=document.getElementsByTagName('script')[0],
                qc=document.createElement('script');
                qc.async = true;
                qc.src = (ssl ? 'https://secure' : 'http://edge') + '.quantserve.com/quant.js';
                s.parentNode.insertBefore(qc, s);
                _qevents.push({ qacct: "p-c1rF4kxgLUzNc" });
                            var sc=document.createElement('script');
                sc.async=true;
                sc.src=(ssl?'https://sb':'http://b') + '.scorecardresearch.com/beacon.js';
                s.parentNode.insertBefore(sc, s);
                _comscore.push({ c1: "2", c2: "17440561" });
        })();

     
 
                
                (function(appendChild) {
                    Node.prototype.appendChild = function() {
                        var parent = this;
                        var newNode = arguments[0];
                        if (parent.nodeName === 'HEAD'
                            && newNode
                            && newNode.nodeName === 'SCRIPT'
                            && newNode.src) {
                            
                            window.setTimeout(function() {
                                var result = newNode.src.match(/^https:\/\/maps\.googleapis\.com\/maps\/api\/place\/js\/(\w+)Service\./i) || [];
                                var service = result[1];
                                if (service) {
                                    if (service === 'Autocompletion') service =  2;
                                    else if (service === 'Place') service = 1;
                                    else service = 0;
                                    StackExchange.using('gps', function() {
                                        StackExchange.gps.track('google_maps_places_api.call', { service: service });
                                    });
                                }
                            }, 0);
                        }
                        return appendChild.apply(this, arguments);
                    };
                })(Node.prototype.appendChild);
             
