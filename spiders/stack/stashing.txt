
 (function () { var old = $.fn.contents; $.fn.contents = function () { try { return old.apply(this, arguments); } catch (e) { return $([]); } } })() 
 
 
 
 
 
 
 
 Stack Overflow 
 
 
 
 
 Questions 
 
 
 Developer Jobs 
 
 
 Documentation  beta 
 
 
 Tags 
 
 
 Users 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 current community 
 
 
 
 
 
 
 help 
 chat 
 
 
 
        Stack Overflow
     
 
 
 
 
 
 
 
        Meta Stack Overflow
     
 
 
 
 
 
your communities             
 
 
 
 Sign up  or  log in  to customize your list.
                 
 
 
 more stack exchange communities 
 
 company blog 
 
 
 
 
 
 
 
 
 
 
                            Tour
                             
                                Start here for a quick overview of the site
                             
 
 
 
 
                        Help Center
                         
                            Detailed answers to any questions you might have
                         
 
 
 
 
                                Meta
                                 
                                    Discuss the workings and policies of this site
                                 
 
 
 
 
                                About Us
                                 
                                    Learn more about Stack Overflow the company
                                 
 
 
 
 
                                Business
                                 
                                    Learn more about hiring developers or posting ads with us
                                 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 Log In 
 Sign Up 
 
 
 
 
 
        StackExchange.ready(function () { StackExchange.topbar.init(); });
            StackExchange.scrollPadding.setPaddingTop(60, 10);      
 
 
 
 
 Git 
 
 
 
 
   
 
 
 
 
 dashboard 
 all topics 
 
 
 
 
 
 
 
 
 
 Popular 
 
 
 
 
 
 
 
 
 
 
        StackExchange.ready(function () {
            StackExchange.docs.search.init({
                popularTopicsJson: [{"Id":245,"DocTag":"git","Title":"Ignoring Files and Folders","Url":"/documentation/git/245/ignoring-files-and-folders"},{"Id":218,"DocTag":"git","Title":"Getting started with Git","Url":"/documentation/git/218/getting-started-with-git"},{"Id":415,"DocTag":"git","Title":"Branching","Url":"/documentation/git/415/branching"},{"Id":355,"DocTag":"git","Title":"Rebasing","Url":"/documentation/git/355/rebasing"},{"Id":323,"DocTag":"git","Title":"Committing","Url":"/documentation/git/323/committing"}]
            });
        });
     
   
 
 
 
 Topic 
 
 
 
 
 
 
 You must  sign up  or  log in  to make a topic request. 
 
 
 
 
 
 
 
    StackExchange.ready(function () {
        StackExchange.docs.requestTopic.init('git');
    });
   
 
 
 
 
 
 
 Stashing   
            All Versions
         
 
 
 
 topic 
 discuss 
 
 
 
 
 Title 
 
 
 
 Versions 
 
 
                        0.99
                     
 
                        1.0
                     
 
                        1.1
                     
 
                        1.2
                     
 
                        1.3
                     
 
                        1.4
                     
 
                        1.5
                     
 
                        1.5.3
                     
 
                        1.6
                     
 
                        1.6.3
                     
 
                        1.6.5
                     
 
                        1.7
                     
 
                        1.7.10
                     
 
                        1.8
                     
 
                        1.8.3
                     
 
                        1.9
                     
 
                        2.0
                     
 
                        2.1
                     
 
                        2.2
                     
 
                        2.3
                     
 
                        2.4
                     
 
                        2.5
                     
 
                        2.6
                     
 
                        2.7
                     
 
                        2.8
                     
 
                        2.9
                     
 
                        2.10
                     
 
                        2.10.2
                     
 
                        2.11
                     
 
                        2.11.1
                     
 
                        2.12
                     
 
                        2.13
                     
 
 
 
 Introduction 
 
 
 
 
 
 
 
 
 
 
   add introduction 
 edit 
 share 
 request improvement 
   edit 
 move 
 delete topic 
 share 
 
 
 
 
 
                var ados = ados || {}; ados.run = ados.run || [];
                ados.run.push(function () { ados_add_placement(22,499571,"adzerk1028426716",4).setZone(29); });
             
 
 
 
 
 This draft deletes the entire topic. 
 
 
 
 
 
 
 
 
                    Examples
                     
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 7 
 
 What is Stashing? 
 
 
 
 
 
 7 
 
 
 
 
 
   
 When working on a project, you might be half-way through a feature branch change when a bug is raised against master. You're not ready to commit your code, but you also don't want to lose your changes. This is where  git stash  comes in handy. 
 Run  git status  on a branch to show your uncommitted changes: 
 (master) $ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   business/com/test/core/actions/Photo.c

no changes added to commit (use "git add" and/or "git commit -a")
 
 Then run  git stash  to save these changes to a stack: 
 (master) $ git stash
Saved working directory and index state WIP on master: 
2f2a6e1 Merge pull request #1 from test/test-branch
HEAD is now at 2f2a6e1 Merge pull request #1 from test/test-branch
 
 If you have added files to your working directory these can be stashed as well. You just need to stage them first. 
 (master) $ git stash
Saved working directory and index state WIP on master:
(master) $ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)

        NewPhoto.c

nothing added to commit but untracked files present (use "git add" to track)
(master) $ git stage NewPhoto.c
(master) $ git stash
Saved working directory and index state WIP on master:
(master) $ git status
On branch master
nothing to commit, working tree clean
(master) $
 
 Your working directory is now clean of any changes you made.  You can see this by re-running  git status : 
 (master) $ git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
 
 To apply the very last stash, run  git stash apply  (additionally, you can apply  and  remove the last stashed changed with  git stash pop ): 
 (master) $ git stash apply
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   business/com/test/core/actions/Photo.c

no changes added to commit (use "git add" and/or "git commit -a")
 
 Note, however, that stashing does not remember the branch you were working on.  In the above examples, the user was stashing on  master .  If they switch to the  dev  branch,  dev , and run  git stash apply  the last stash is put on the  dev  branch. 
 (master) $ git checkout -b dev
Switched to a new branch 'dev'
(dev) $ git stash apply
On branch dev
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   business/com/test/core/actions/Photo.c

no changes added to commit (use "git add" and/or "git commit -a")
 
 
 
 
 
 
 
 
 
 edited  Jun 18 at 22:05 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                    +1
                     
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 18 
 
 Create stash 
 
 
 
 
 
 18 
 
 
 Save the current state of working directory and the index (also known as the staging area) in a stack of stashes. 
 git stash
 
 To include all untracked files in the stash use the  --include-untracked  or  -u  flags. 
 git stash --include-untracked
 
 To include a message with your stash to make it more easily identifiable later 
 git stash save "<whatever message>"
 
 To leave the staging area in current state after stash use the  --keep-index  or  -k  flags. 
 git stash --keep-index
 
 
 
 
 
 
 
 
 edited  Aug 23 '16 at 10:15 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                    +1
                     
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
   
 
                var ados = ados || {}; ados.run = ados.run || [];
                ados.run.push(function () { ados_add_placement(22,499571,"adzerk1965783442",4).setZone(30); });
             
 
 
   
 
 
 
 
 
 
 
 
 13 
 
 Apply and remove stash 
 
 
 
 
 
 13 
 
 
 To apply the last stash and remove it from the stack - type: 
 git stash pop
 
 To apply specific stash and remove it from the stack - type: 
 git stash pop stash@{n}
 
 
 
 
 
 
 
 
 edited  Oct 5 '16 at 19:30 
 
 
 
 
 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 10 
 
 Apply stash without removing it 
 
 
 
 
 
 10 
 
 
 Applies the last stash without removing it from the stack 
 git stash apply
 
 Or a specific stash 
 git stash apply stash@{n}
 
 
 
 
 
 
 
 
 created  Jul 21 '16 at 19:53 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 8 
 
 Show stash 
 
 
 
 
 
 8 
 
 
 Shows the changes saved in the last stash 
 git stash show
 
 Or a specific stash 
 git stash show stash@{n}
 
 To show content of the changes saved for the specific stash 
 git stash show -p stash@{n}
 
 
 
 
 
 
 
 
 edited  Jul 27 '16 at 1:57 
 
 
 
 
 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 7 
 
 Partial stash 
 
 
 
 
 
 7 
 
 
 If you would like to stash only  some  diffs in your working set, you can use a partial stash. 
 git stash -p
 
 And then interactively select which hunks to stash. 
 As of version 2.13.0 you can also avoid the interactive mode and create a partial stash with a pathspec using the new  push  keyword. 
 git stash push -m "My partial stash" -- app.config
 
 
 
 
 
 
 
 
 edited  Jun 9 at 2:02 
 
 
 
 
 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 6 
 
 List saved stashes 
 
 
 
 
 
 6 
 
 
 git stash list
 
 This will list all stashes in the stack in reverse chronological order. 
You will get a list that looks something like this: 
 stash@{0}: WIP on master: 67a4e01 Merge tests into develop
stash@{1}: WIP on master: 70f0d95 Add user role to localStorage on user login
 
 You can refer to specific stash by its name, for example  stash@{1} . 
 
 
 
 
 
 
 
 edited  Jul 25 '16 at 5:33 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 5 
 
 Move your work in progress to another branch 
 
 
 
 
 
 5 
 
 
 If while working you realize you're on wrong branch and you haven't created any commits yet, you can easily move your work to correct branch using stashing: 
 git stash
git checkout correct-branch
git stash pop
 
 Remember  git stash pop  will apply the last stash and delete it from the stash list. To keep the stash in the list and only apply to some branch you can use: 
 git stash apply
 
 
 
 
 
 
 
 
 edited  Jul 24 '16 at 10:25 
 
 
 
 
 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 3 
 
 Remove stash 
 
 
 
 
 
 3 
 
 
 Remove all stash 
 git stash clear
 
 Removes the last stash 
 git stash drop
 
 Or a specific stash 
 git stash drop stash@{n}
 
 
 
 
 
 
 
 
 edited  Dec 29 '16 at 7:55 
 
 
 
 
 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 2 
 
 Apply part of a stash with checkout 
 
 
 
 
 
 2 
 
 
 You've made a stash and wish to checkout only some of the files in that stash. 
 git checkout stash@{0} -- myfile.txt
 
 
 
 
 
 
 
 
 created  Jul 22 '16 at 12:51 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 1 
 
 Interactive Stashing 
 
 
 
 
 
 1 
 
 
 Stashing takes the dirty state of your working directory – that is, your modified tracked files and staged changes – and saves it on a stack of unfinished changes that you can reapply at any time. 
 Stashing only modified files: 
 Suppose you don't want to stash the staged files and only stash the modified files so you can use: 
 git stash --keep-index
 
 Which will stash only the modified files. 
 Stashing untracked files: 
 Stash never saves the untracked files it only stashes the modified and staged files. So suppose if you need to stash the untracked files too then you can use this: 
 git stash -u
 
 this will track the untracked, staged and modified files. 
 Stash some particular changes only: 
 Suppose you need to stash only some part of code from the file or only some files only from all the modified and stashed files then you can do it like this: 
 git stash --patch
 
 Git will not stash everything that is modified but will instead prompt you interactively which of the changes you would like to stash and which you would like to keep in your working directory. 
 
 
 
 
 
 
 
 edited  Jul 24 '16 at 2:30 
 
 
 
 
 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 1 
 
 Recovering earlier changes from stash 
 
 
 
 
 
 1 
 
 
 To get your most recent stash after running git stash, use 
  git stash apply
 
 To see a list of your stashes, use 
  git stash list
 
 You will get a list that looks something like this 
 stash@{0}: WIP on master: 67a4e01 Merge tests into develop
stash@{1}: WIP on master: 70f0d95 Add user role to localStorage on user login
 
 Choose a different git stash to restore with the number that shows up for the stash you want 
 git stash apply stash@{2}
 
 
 
 
 
 
 
 
 edited  Sep 6 '16 at 9:02 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 0 
 
 Recover a dropped stash 
 
 
 
 
 
 0 
 
 
 If you have only just popped it and the terminal is still open, you will still have the hash value printed by  git stash pop  on screen: 
 $ git stash pop
[...]
Dropped refs/stash@{0} (2ca03e22256be97f9e40f08e6d6773c7d41dbfd1)
 
 (Note that git stash drop also produces the same line.) 
 Otherwise, you can find it using this: 
 git fsck --no-reflog | awk '/dangling commit/ {print $3}'
 
 This will show you all the commits at the tips of your commit graph which are no longer referenced from any branch or tag – every lost commit, including every stash commit you’ve ever created, will be somewhere in that graph. 
 The easiest way to find the stash commit you want is probably to pass that list to  gitk : 
 gitk --all $( git fsck --no-reflog | awk '/dangling commit/ {print $3}' )
 
 This will launch a repository browser showing you  every single commit in the repository ever , regardless of whether it is reachable or not. 
 You can replace  gitk  there with something like  git log --graph --oneline --decorate  if you prefer a nice graph on the console over a separate GUI app. 
 To spot stash commits, look for commit messages of this form: 
         WIP on  somebranch :  commithash Some old commit message 
 Once you know the hash of the commit you want, you can apply it as a stash: 
 git stash apply  $stash_hash 
 Or you can use the context menu in  gitk  to create branches for any unreachable commits you are interested in. After that, you can do whatever you want with them with all the normal tools. When you’re done, just blow those branches away again. 
 
 
 
 
 
 
 
 created  Jul 25 '16 at 11:43 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 + 
            Add Example
         
 
 
 
        Please consider making a request to improve this example.
         Request Improvement 
 
 
 
 
 
 Syntax 
 
 git stash list [<options>] 
 git stash show [<stash>] 
 git stash drop [-q|--quiet] [<stash>] 
 git stash ( pop | apply ) [--index] [-q|--quiet] [<stash>] 
 git stash branch <branchname> [<stash>] 
 git stash [save [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet] [-u|--include-untracked] [-a|--all] [<message>]] 
 git stash clear 
 git stash create [<message>] 
 git stash store [-m|--message <message>] [-q|--quiet] <commit> 
 
 
 
 
   edit 
 share 
 
   edit 
 
 
 
 
 
 
 Parameters 
 Parameter Details show Show the changes recorded in the stash as a diff between the stashed state and its original parent. When no <stash> is given, shows the latest one. list List the stashes that you currently have. Each stash is listed with its name (e.g. stash@{0} is the latest stash, stash@{1} is the one before, etc.), the name of the branch that was current when the stash was made, and a short description of the commit the stash was based on. pop Remove a single stashed state from the stash list and apply it on top of the current working tree state. apply Like  pop , but do not remove the state from the stash list. clear Remove all the stashed states. Note that those states will then be subject to pruning, and may be impossible to recover. drop Remove a single stashed state from the stash list. When no <stash> is given, it removes the latest one. i.e. stash@{0}, otherwise <stash> must be a valid stash log reference of the form stash@{<revision>}. create Create a stash (which is a regular commit object) and return its object name, without storing it anywhere in the ref namespace. This is intended to be useful for scripts. It is probably not the command you want to use; see "save" above. store Store a given stash created via git stash create (which is a dangling merge commit) in the stash ref, updating the stash reflog. This is intended to be useful for scripts. It is probably not the command you want to use; see "save" above. 
 
 
 
   edit 
 share 
 
   edit 
 
 
 
 
 
 
 Remarks 
 Stashing allows us to have a clean working directory without losing any information. Then, it's possible to start working on something different and/or to switch branches. 
 
 
 
   edit 
 share 
 
   edit 
 
 
 
 
 
 
 edited  Jun 18 at 22:05 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                    +18
                     
 
 
   
 
 Still have a question about Stashing? 
 Ask Question 
 
 
 
 
 Topic Outline 
 
 13 Examples 
 
 
 
 
 Create stash 
 
 
 Apply and remove stash 
 
 
 Apply stash without removing it 
 
 
 Show stash 
 
 
 Partial stash 
 
 
 What is Stashing? 
 
 
 List saved stashes 
 
 
 Move your work in progress to another branch 
 
 
 Remove stash 
 
 
 Apply part of a stash with checkout 
 
 
 Interactive Stashing 
 
 
 Recovering earlier changes from stash 
 
 
 Recover a dropped stash 
 
 Show more 
 
 Syntax 
 Parameters 
 
 Remarks 
 
 
 
 
                    Blog
                 
 
 
 
 
   
 
 
 Trends in Government Software Developers 
 
 
 
 
 
 
   
 
 
 Introducing Channels: Private Q&A for Your Team 
 
 
 
 
   
 
                var ados = ados || {}; ados.run = ados.run || [];
                ados.run.push(function () { ados_add_placement(22,499571,"adzerk188925175",5).setZone(56016); });
             
 
 
 
 
        StackExchange.ready(function () { $.get('/documentation/git/ivc/1440-636356032254847576:8r1wczfwp7bqzmljwof0p7f0elo.gif?topicId=1440'); });
     
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                    Topic Outline
                         
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 Save Draft 
 Discard 
 
 
 
 
 Sign up or log in 
 Save edit as a guest 
 Join Stack Overflow 
 
 
 
 Using Google 
 
 
 Using Facebook 
 
 
 Using Email and Password 
 
 
 
 
 Name 
 
 
 
 Email 
 
 Save Draft 
 
 
 
 
 We recognize you from another Stack Exchange Network site! 
 Join and Save Draft 
 
 Discard Draft 
 
 
 
 
 
 
 
 
 
 
 
 
 
 Stack Overflow 
 
 Questions 
 Jobs 
 Developer Jobs Directory 
 Documentation 
 Help 
 Mobile 
 
 
 
 Stack Overflow  Business 
 
 Talent 
 Ads 
 Enterprise 
 Insights 
 
 
 
 Company 
 
 About 
 Press 
 Work Here 
 Legal 
 Privacy Policy 
 Contact Us 
 
 
 
 
 
 Stack Exchange  Network 
 
 Technology 
 Life / Arts 
 Culture / Recreation 
 Science 
 Other 
 
 
 
 
 
 Stack Overflow 
 Server Fault 
 Super User 
 Web Applications 
 Ask Ubuntu 
 Webmasters 
 Game Development 
 
 TeX - LaTeX 
 Software Engineering 
 Unix & Linux 
 Ask Different (Apple) 
 WordPress Development 
 Geographic Information Systems 
 Electrical Engineering 
 
 Android Enthusiasts 
 Information Security 
 Database Administrators 
 Drupal Answers 
 SharePoint 
 User Experience 
 Data Science 
 
 Mathematica 
 Salesforce 
 ExpressionEngine® Answers 
 Blender 
 Network Engineering 
 Cryptography 
 Code Review 
 
 Magento 
 Software Recommendations 
 Signal Processing 
 Emacs 
 Raspberry Pi 
 Programming Puzzles & Code Golf 
 Ethereum 
 
 
 
                            more (27)
                         
 
 
 
 
 
 
 Photography 
 Science Fiction & Fantasy 
 Graphic Design 
 Movies & TV 
 Music: Practice & Theory 
 Worldbuilding 
 Seasoned Advice (cooking) 
 
 Home Improvement 
 Personal Finance & Money 
 Academia 
 Law 
 
 
 
                            more (16)
                         
 
 
 
 
 
 
 English Language & Usage 
 Skeptics 
 Mi Yodeya (Judaism) 
 Travel 
 Christianity 
 English Language Learners 
 Japanese Language 
 
 Arqade (gaming) 
 Bicycles 
 Role-playing Games 
 Anime & Manga 
 Puzzling 
 Motor Vehicle Maintenance & Repair 
 
 
 
                            more (32)
                         
 
 
 
 
 
 
 MathOverflow 
 Mathematics 
 Cross Validated (stats) 
 Theoretical Computer Science 
 Physics 
 Chemistry 
 Biology 
 
 Computer Science 
 Philosophy 
 
 
 
                            more (10)
                         
 
 
 
 
 
 
 Meta Stack Exchange 
 Stack Apps 
 API 
 Data 
 Area 51 
 
 
 
 
 
 Blog 
 Facebook 
 Twitter 
 LinkedIn 
 
 
 
                                    site design / logo © 2017 Stack Exchange Inc; user contributions licensed under  cc by-sa 3.0 
                                    with  attribution required .
                                     rev 2017.7.13.1278 
 
 
 
 
 
 
 
 
 Stack Overflow works best with JavaScript enabled
             
 
 
 var z=document.createElement("script");z.type="text/javascript",z.async=!0,z.src="https://static.adzerk.net/ados.js";var s=document.getElementsByTagName("script")[0];s.parentNode.insertBefore(z,s); 
 
var ados = ados || {};
ados.run = ados.run || [];

 
 
            (function(i, s, o, g, r, a, m) {
                i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function() { (i[r].q = i[r].q || []).push(arguments) }, i[r].l = 1 * new Date(); a = s.createElement(o),
                m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m);
            })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');
                ga('create', 'UA-5620270-1');
                ga('create', 'UA-5620270-60', {name: 'pageData', sampleRate: 100 });
                ga('send', 'pageview');
                ga('pageData.send', 'pageview');
        var _qevents = _qevents || [],
            _comscore = _comscore || [];
        (function () {
            var ssl='https:'==document.location.protocol,
                s=document.getElementsByTagName('script')[0],
                qc=document.createElement('script');
                qc.async = true;
                qc.src = (ssl ? 'https://secure' : 'http://edge') + '.quantserve.com/quant.js';
                s.parentNode.insertBefore(qc, s);
                _qevents.push({ qacct: "p-c1rF4kxgLUzNc" });
                            var sc=document.createElement('script');
                sc.async=true;
                sc.src=(ssl?'https://sb':'http://b') + '.scorecardresearch.com/beacon.js';
                s.parentNode.insertBefore(sc, s);
                _comscore.push({ c1: "2", c2: "17440561" });
        })();

     
 
                
                (function(appendChild) {
                    Node.prototype.appendChild = function() {
                        var parent = this;
                        var newNode = arguments[0];
                        if (parent.nodeName === 'HEAD'
                            && newNode
                            && newNode.nodeName === 'SCRIPT'
                            && newNode.src) {
                            
                            window.setTimeout(function() {
                                var result = newNode.src.match(/^https:\/\/maps\.googleapis\.com\/maps\/api\/place\/js\/(\w+)Service\./i) || [];
                                var service = result[1];
                                if (service) {
                                    if (service === 'Autocompletion') service =  2;
                                    else if (service === 'Place') service = 1;
                                    else service = 0;
                                    StackExchange.using('gps', function() {
                                        StackExchange.gps.track('google_maps_places_api.call', { service: service });
                                    });
                                }
                            }, 0);
                        }
                        return appendChild.apply(this, arguments);
                    };
                })(Node.prototype.appendChild);
             
