
 (function () { var old = $.fn.contents; $.fn.contents = function () { try { return old.apply(this, arguments); } catch (e) { return $([]); } } })() 
 
 
 
 
 
 
 
 Stack Overflow 
 
 
 
 
 Questions 
 
 
 Developer Jobs 
 
 
 Documentation  beta 
 
 
 Tags 
 
 
 Users 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 current community 
 
 
 
 
 
 
 help 
 chat 
 
 
 
        Stack Overflow
     
 
 
 
 
 
 
 
        Meta Stack Overflow
     
 
 
 
 
 
your communities             
 
 
 
 Sign up  or  log in  to customize your list.
                 
 
 
 more stack exchange communities 
 
 company blog 
 
 
 
 
 
 
 
 
 
 
                            Tour
                             
                                Start here for a quick overview of the site
                             
 
 
 
 
                        Help Center
                         
                            Detailed answers to any questions you might have
                         
 
 
 
 
                                Meta
                                 
                                    Discuss the workings and policies of this site
                                 
 
 
 
 
                                About Us
                                 
                                    Learn more about Stack Overflow the company
                                 
 
 
 
 
                                Business
                                 
                                    Learn more about hiring developers or posting ads with us
                                 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 Log In 
 Sign Up 
 
 
 
 
 
        StackExchange.ready(function () { StackExchange.topbar.init(); });
            StackExchange.scrollPadding.setPaddingTop(60, 10);      
 
 
 
 
 Git 
 
 
 
 
   
 
 
 
 
 dashboard 
 all topics 
 
 
 
 
 
 
 
 
 
 Popular 
 
 
 
 
 
 
 
 
 
 
        StackExchange.ready(function () {
            StackExchange.docs.search.init({
                popularTopicsJson: [{"Id":245,"DocTag":"git","Title":"Ignoring Files and Folders","Url":"/documentation/git/245/ignoring-files-and-folders"},{"Id":218,"DocTag":"git","Title":"Getting started with Git","Url":"/documentation/git/218/getting-started-with-git"},{"Id":415,"DocTag":"git","Title":"Branching","Url":"/documentation/git/415/branching"},{"Id":355,"DocTag":"git","Title":"Rebasing","Url":"/documentation/git/355/rebasing"},{"Id":323,"DocTag":"git","Title":"Committing","Url":"/documentation/git/323/committing"}]
            });
        });
     
   
 
 
 
 Topic 
 
 
 
 
 
 
 You must  sign up  or  log in  to make a topic request. 
 
 
 
 
 
 
 
    StackExchange.ready(function () {
        StackExchange.docs.requestTopic.init('git');
    });
   
 
 
 
 
 
 
 Internals   
            All Versions
         
 
 
 
 topic 
 discuss 
 
 
 
 
 Title 
 
 
 
 Versions 
 
 
                        0.99
                     
 
                        1.0
                     
 
                        1.1
                     
 
                        1.2
                     
 
                        1.3
                     
 
                        1.4
                     
 
                        1.5
                     
 
                        1.5.3
                     
 
                        1.6
                     
 
                        1.6.3
                     
 
                        1.6.5
                     
 
                        1.7
                     
 
                        1.7.10
                     
 
                        1.8
                     
 
                        1.8.3
                     
 
                        1.9
                     
 
                        2.0
                     
 
                        2.1
                     
 
                        2.2
                     
 
                        2.3
                     
 
                        2.4
                     
 
                        2.5
                     
 
                        2.6
                     
 
                        2.7
                     
 
                        2.8
                     
 
                        2.9
                     
 
                        2.10
                     
 
                        2.10.2
                     
 
                        2.11
                     
 
                        2.11.1
                     
 
                        2.12
                     
 
                        2.13
                     
 
 
 
 Introduction 
 
 
 
 
 
 
 
 
 
 
   add introduction 
 edit 
 share 
 request improvement 
   edit 
 move 
 delete topic 
 share 
 
 
 
 
 
                var ados = ados || {}; ados.run = ados.run || [];
                ados.run.push(function () { ados_add_placement(22,499571,"adzerk2118468291",4).setZone(29); });
             
 
 
 
 
 This draft deletes the entire topic. 
 
 
 
 
 
 
 
 
                    Examples
                     
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 0 
 
 Blob Object 
 
 
 
 
 
 0 
 
 
 
 
 
   
 A  blob  contains arbitrary binary file contents. Commonly, it will be raw text such as source code or a blog article. But it could just as easily be the bytes of a PNG file or anything else. 
 If you have the hash of a  blob , you can look at it's contents. 
 $ git cat-file -p d429810
package com.example.project

class Foo {
 ...
}
...
 
 For example, you can browse a  tree  as above, and then look at one of the  blobs  in it. 
 $ git cat-file -p 07b1a631
100644 blob b91bba1b   .gitignore
100644 blob cc0956f1   Makefile
040000 tree 92e1ca7e   src
100644 blob cae391ff   Readme.txt

$ git cat-file -p cae391ff
Welcome to my project! This is the readmefile
...
 
 
 
 
 
 
 
 
 created  Jul 22 '16 at 18:12 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 0 
 
 Commit Object 
 
 
 
 
 
 0 
 
 
 A  commit  is probably the  object  type most familiar to  git  users, as it's what they are used to creating with the  git commit  commands. 
 However, the  commit  does not directly contain any changed files or data. Rather, it contains mostly metadata and pointers to other  objects  which contain the actual contents of the  commit . 
 A  commit  contains a few things: 
 
 hash of a  tree 
 hash of a parent  commit 
 author name/email, commiter name/email 
 commit message 
 
 You can see the contents of any commit like this: 
 $ git cat-file commit 5bac93
tree 04d1daef...
parent b7850ef5...
author Geddy Lee <glee@rush.com>
commiter Neil Peart <npeart@rush.com>

First commit!
 
 Tree 
 A very important note is that the  tree  objects stores EVERY file in  your project, and it stores whole files not diffs. This means that each  commit  contains a snapshot of the entire project*. 
 * Technically, only changed files are stored. But this is more an implementation detail for efficiency. From a design perspective, a  commit  should be considered as containing a complete copy of the project . 
 Parent 
 The  parent  line contains a hash of another  commit  object, and can be thought of as a "parent pointer" that points to the "previous commit".  This implicitly forms a graph of commits known as the  commit graph . Specifically, it's a  directed acyclic graph  (or DAG). 
 
 
 
 
 
 
 
 created  Jul 22 '16 at 18:12 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
   
 
                var ados = ados || {}; ados.run = ados.run || [];
                ados.run.push(function () { ados_add_placement(22,499571,"adzerk1064166590",4).setZone(30); });
             
 
 
   
 
 
 
 
 
 
 
 
 0 
 
 Creating new Commits 
 
 
 
 
 
 0 
 
 
 The  git commit  command does a few things: 
 
 Create  blobs  and  trees  to represent your project directory - stored in  .git/objects 
 Creates a new  commit  object with your author information, commit message, and the root  tree  from step 1 - also stored in  .git/objects 
 Updates the  HEAD  ref in  .git/HEAD  to the hash of the newly-created  commit 
 
 This results in a new snapshot of your project being added to  git  that is connected to the previous state. 
 
 
 
 
 
 
 
 created  Jul 22 '16 at 18:12 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 0 
 
 Creating new Refs 
 
 
 
 
 
 0 
 
 
 Running  git checkout -b <refname>  will create a new ref that points to the current  commit . 
 $ cat .git/head
1f324a

$ git checkout -b TestBranch

$ cat .git/refs/heads/TestBranch
1f324a
 
 
 
 
 
 
 
 
 created  Jul 22 '16 at 18:12 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 0 
 
 HEAD ref 
 
 
 
 
 
 0 
 
 
 HEAD  is a special  ref . It always points to the current  object. 
 You can see where it's currently pointing by checking the  .git/HEAD  file. 
 Normally,  HEAD  points to another  ref : 
 $cat .git/HEAD
ref: refs/heads/mainline
 
 But it can also point directly to an  object : 
 $ cat .git/HEAD
4bb6f98a223abc9345a0cef9200562333
 
 This is what's known as a "detached head" - because  HEAD  is not attached to (pointing at) any  ref , but rather points directly to an  object . 
 
 
 
 
 
 
 
 created  Jul 22 '16 at 18:12 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 0 
 
 Moving HEAD  
 
 
 
 
 
 0 
 
 
 When you run  git checkout  on a commit (specified by hash or ref) you're telling  git  to make your working directory look like how it did when the snapshot was taken. 
 
 Update the files in the working directory to match the  tree  inside the  commit 
 Update  HEAD  to point to the specified hash or ref 
 
 
 
 
 
 
 
 
 created  Jul 22 '16 at 18:12 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 0 
 
 Moving refs around 
 
 
 
 
 
 0 
 
 
 Running  git reset --hard  moves refs to the specified hash/ref. 
 Moving  MyBranch  to  b8dc53 : 
 $ git checkout MyBranch      # moves HEAD to MyBranch
$ git reset --hard b8dc53    # makes MyBranch point to b8dc53     
 
 
 
 
 
 
 
 
 created  Jul 22 '16 at 18:12 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 0 
 
 Objects 
 
 
 
 
 
 0 
 
 
 git  is fundamentally a key-value store. When you add data to  git , it builds an  object  and uses the SHA-1 hash of the  object 's contents as a key. 
 Therefore, any content in  git  can be looked up by it's hash: 
 git cat-file -p 4bb6f98 
 There are 4 types of  Object : 
 
 blob 
 tree 
 commit 
 tag 
 
 
 
 
 
 
 
 
 created  Jul 22 '16 at 18:12 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 0 
 
 Refs 
 
 
 
 
 
 0 
 
 
 A  ref  is essentially a pointer. It's a name that points to an  object . For example, 
 "master" --> 1a410e...
 
 They are stored in `.git/refs/heads/ in plain text files. 
 $ cat .git/refs/heads/mainline
4bb6f98a223abc9345a0cef9200562333
 
 This is commonly what are called  branches . However, you'll note that in  git  there is no such thing as a  branch  - only a  ref . 
 Now, it's possible to navigate  git  purely by jumping around to different  objects  directly by their hashes. But this would be terribly inconvenient. A  ref  gives you a convenient name to refer to  objects  by. It's much easier to ask  git  to go to a specific place by name rather than by hash. 
 
 
 
 
 
 
 
 created  Jul 22 '16 at 18:12 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 0 
 
 Repo 
 
 
 
 
 
 0 
 
 
 A  git repository  is an on-disk data structure which stores metadata for a set of files and directories. 
 It lives in your project's  .git/  folder. Every time you commit data to git, it gets stored here. Inversely,  .git/  contains every single commit. 
 It's basic structure is like this: 
 .git/
    objects/
    refs/
 
 
 
 
 
 
 
 
 created  Jul 22 '16 at 18:12 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 0 
 
 Tree Object 
 
 
 
 
 
 0 
 
 
 A  tree  basically represents a folder in a traditional filesystem: nested containers for files or other folders. 
 A  tree  contains: 
 
 0 or more  blob  objects 
 0 or more  tree  objects 
 
 Just as you can use  ls  or  dir  to list the contents of a folder, you can list the contents of a  tree  object. 
 $ git cat-file -p 07b1a631
100644 blob b91bba1b   .gitignore
100644 blob cc0956f1   Makefile
040000 tree 92e1ca7e   src
...
 
 You can look up the files in a  commit  by first finding the hash of the  tree  in the  commit , and then looking at that  tree : 
 $ git cat-file commit 4bb6f93a
tree 07b1a631
parent ...
author ...
commiter ... 
 
$ git cat-file -p 07b1a631
100644 blob b91bba1b   .gitignore
100644 blob cc0956f1   Makefile
040000 tree 92e1ca7e   src
...

 
 
 
 
 
 
 
 
 created  Jul 22 '16 at 18:12 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 + 
            Add Example
         
 
 
 
        Please consider making a request to improve this example.
         Request Improvement 
 
 
 
 
 
 Syntax 
 
 
 Syntax 
 
 
 
   add syntax 
 
 
 
 
 
 
 
 Parameters 
 
 
 Parameters 
 
 
 
   add parameters 
 
 
 
 
 
 
 
 Remarks 
 
 
 Remarks 
 
 
 
   add remarks 
 
 
 
 
 
 
 
 edited  Jul 23 '16 at 0:59 
 
 
 
 
 
 
 
 
   
 
 Still have a question about Internals? 
 Ask Question 
 
 
 
 
 Topic Outline 
 
 11 Examples 
 
 
 
 
 Blob Object 
 
 
 Commit Object 
 
 
 Creating new Commits 
 
 
 Creating new Refs 
 
 
 HEAD ref 
 
 
 Moving HEAD  
 
 
 Moving refs around 
 
 
 Objects 
 
 
 Refs 
 
 
 Repo 
 
 
 Tree Object 
 
 Show more 
 
 
 
 
                    Blog
                 
 
 
 
 
   
 
 
 Trends in Government Software Developers 
 
 
 
 
 
 
   
 
 
 Introducing Channels: Private Q&A for Your Team 
 
 
 
 
   
 
                var ados = ados || {}; ados.run = ados.run || [];
                ados.run.push(function () { ados_add_placement(22,499571,"adzerk702104962",5).setZone(56016); });
             
 
 
 
 
        StackExchange.ready(function () { $.get('/documentation/git/ivc/2637-636356035608775136:vfkugoudomtzdijhwwrazgwmaq.gif?topicId=2637'); });
     
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                    Topic Outline
                         
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 Save Draft 
 Discard 
 
 
 
 
 Sign up or log in 
 Save edit as a guest 
 Join Stack Overflow 
 
 
 
 Using Google 
 
 
 Using Facebook 
 
 
 Using Email and Password 
 
 
 
 
 Name 
 
 
 
 Email 
 
 Save Draft 
 
 
 
 
 We recognize you from another Stack Exchange Network site! 
 Join and Save Draft 
 
 Discard Draft 
 
 
 
 
 
 
 
 
 
 
 
 
 
 Stack Overflow 
 
 Questions 
 Jobs 
 Developer Jobs Directory 
 Documentation 
 Help 
 Mobile 
 
 
 
 Stack Overflow  Business 
 
 Talent 
 Ads 
 Enterprise 
 Insights 
 
 
 
 Company 
 
 About 
 Press 
 Work Here 
 Legal 
 Privacy Policy 
 Contact Us 
 
 
 
 
 
 Stack Exchange  Network 
 
 Technology 
 Life / Arts 
 Culture / Recreation 
 Science 
 Other 
 
 
 
 
 
 Stack Overflow 
 Server Fault 
 Super User 
 Web Applications 
 Ask Ubuntu 
 Webmasters 
 Game Development 
 
 TeX - LaTeX 
 Software Engineering 
 Unix & Linux 
 Ask Different (Apple) 
 WordPress Development 
 Geographic Information Systems 
 Electrical Engineering 
 
 Android Enthusiasts 
 Information Security 
 Database Administrators 
 Drupal Answers 
 SharePoint 
 User Experience 
 Data Science 
 
 Mathematica 
 Salesforce 
 ExpressionEngine® Answers 
 Blender 
 Network Engineering 
 Cryptography 
 Code Review 
 
 Magento 
 Software Recommendations 
 Signal Processing 
 Emacs 
 Raspberry Pi 
 Programming Puzzles & Code Golf 
 Ethereum 
 
 
 
                            more (27)
                         
 
 
 
 
 
 
 Photography 
 Science Fiction & Fantasy 
 Graphic Design 
 Movies & TV 
 Music: Practice & Theory 
 Worldbuilding 
 Seasoned Advice (cooking) 
 
 Home Improvement 
 Personal Finance & Money 
 Academia 
 Law 
 
 
 
                            more (16)
                         
 
 
 
 
 
 
 English Language & Usage 
 Skeptics 
 Mi Yodeya (Judaism) 
 Travel 
 Christianity 
 English Language Learners 
 Japanese Language 
 
 Arqade (gaming) 
 Bicycles 
 Role-playing Games 
 Anime & Manga 
 Puzzling 
 Motor Vehicle Maintenance & Repair 
 
 
 
                            more (32)
                         
 
 
 
 
 
 
 MathOverflow 
 Mathematics 
 Cross Validated (stats) 
 Theoretical Computer Science 
 Physics 
 Chemistry 
 Biology 
 
 Computer Science 
 Philosophy 
 
 
 
                            more (10)
                         
 
 
 
 
 
 
 Meta Stack Exchange 
 Stack Apps 
 API 
 Data 
 Area 51 
 
 
 
 
 
 Blog 
 Facebook 
 Twitter 
 LinkedIn 
 
 
 
                                    site design / logo © 2017 Stack Exchange Inc; user contributions licensed under  cc by-sa 3.0 
                                    with  attribution required .
                                     rev 2017.7.13.1278 
 
 
 
 
 
 
 
 
 Stack Overflow works best with JavaScript enabled
             
 
 
 var z=document.createElement("script");z.type="text/javascript",z.async=!0,z.src="https://static.adzerk.net/ados.js";var s=document.getElementsByTagName("script")[0];s.parentNode.insertBefore(z,s); 
 
var ados = ados || {};
ados.run = ados.run || [];

 
 
            (function(i, s, o, g, r, a, m) {
                i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function() { (i[r].q = i[r].q || []).push(arguments) }, i[r].l = 1 * new Date(); a = s.createElement(o),
                m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m);
            })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');
                ga('create', 'UA-5620270-1');
                ga('create', 'UA-5620270-60', {name: 'pageData', sampleRate: 100 });
                ga('send', 'pageview');
                ga('pageData.send', 'pageview');
        var _qevents = _qevents || [],
            _comscore = _comscore || [];
        (function () {
            var ssl='https:'==document.location.protocol,
                s=document.getElementsByTagName('script')[0],
                qc=document.createElement('script');
                qc.async = true;
                qc.src = (ssl ? 'https://secure' : 'http://edge') + '.quantserve.com/quant.js';
                s.parentNode.insertBefore(qc, s);
                _qevents.push({ qacct: "p-c1rF4kxgLUzNc" });
                            var sc=document.createElement('script');
                sc.async=true;
                sc.src=(ssl?'https://sb':'http://b') + '.scorecardresearch.com/beacon.js';
                s.parentNode.insertBefore(sc, s);
                _comscore.push({ c1: "2", c2: "17440561" });
        })();

     
 
                
                (function(appendChild) {
                    Node.prototype.appendChild = function() {
                        var parent = this;
                        var newNode = arguments[0];
                        if (parent.nodeName === 'HEAD'
                            && newNode
                            && newNode.nodeName === 'SCRIPT'
                            && newNode.src) {
                            
                            window.setTimeout(function() {
                                var result = newNode.src.match(/^https:\/\/maps\.googleapis\.com\/maps\/api\/place\/js\/(\w+)Service\./i) || [];
                                var service = result[1];
                                if (service) {
                                    if (service === 'Autocompletion') service =  2;
                                    else if (service === 'Place') service = 1;
                                    else service = 0;
                                    StackExchange.using('gps', function() {
                                        StackExchange.gps.track('google_maps_places_api.call', { service: service });
                                    });
                                }
                            }, 0);
                        }
                        return appendChild.apply(this, arguments);
                    };
                })(Node.prototype.appendChild);
             
