
 (function () { var old = $.fn.contents; $.fn.contents = function () { try { return old.apply(this, arguments); } catch (e) { return $([]); } } })() 
 
 
 
 
 
 
 
 Stack Overflow 
 
 
 
 
 Questions 
 
 
 Developer Jobs 
 
 
 Documentation  beta 
 
 
 Tags 
 
 
 Users 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 current community 
 
 
 
 
 
 
 help 
 chat 
 
 
 
        Stack Overflow
     
 
 
 
 
 
 
 
        Meta Stack Overflow
     
 
 
 
 
 
your communities             
 
 
 
 Sign up  or  log in  to customize your list.
                 
 
 
 more stack exchange communities 
 
 company blog 
 
 
 
 
 
 
 
 
 
 
                            Tour
                             
                                Start here for a quick overview of the site
                             
 
 
 
 
                        Help Center
                         
                            Detailed answers to any questions you might have
                         
 
 
 
 
                                Meta
                                 
                                    Discuss the workings and policies of this site
                                 
 
 
 
 
                                About Us
                                 
                                    Learn more about Stack Overflow the company
                                 
 
 
 
 
                                Business
                                 
                                    Learn more about hiring developers or posting ads with us
                                 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 Log In 
 Sign Up 
 
 
 
 
 
        StackExchange.ready(function () { StackExchange.topbar.init(); });
            StackExchange.scrollPadding.setPaddingTop(60, 10);      
 
 
 
 
 Git 
 
 
 
 
   
 
 
 
 
 dashboard 
 all topics 
 
 
 
 
 
 
 
 
 
 Popular 
 
 
 
 
 
 
 
 
 
 
        StackExchange.ready(function () {
            StackExchange.docs.search.init({
                popularTopicsJson: [{"Id":245,"DocTag":"git","Title":"Ignoring Files and Folders","Url":"/documentation/git/245/ignoring-files-and-folders"},{"Id":218,"DocTag":"git","Title":"Getting started with Git","Url":"/documentation/git/218/getting-started-with-git"},{"Id":415,"DocTag":"git","Title":"Branching","Url":"/documentation/git/415/branching"},{"Id":355,"DocTag":"git","Title":"Rebasing","Url":"/documentation/git/355/rebasing"},{"Id":323,"DocTag":"git","Title":"Committing","Url":"/documentation/git/323/committing"}]
            });
        });
     
   
 
 
 
 Topic 
 
 
 
 
 
 
 You must  sign up  or  log in  to make a topic request. 
 
 
 
 
 
 
 
    StackExchange.ready(function () {
        StackExchange.docs.requestTopic.init('git');
    });
   
 
 
 
 
 
 
 Committing   
            All Versions
         
 
 
 
 topic 
 discuss 
 
 
 
 
 Title 
 
 
 
 Versions 
 
 
                        0.99
                     
 
                        1.0
                     
 
                        1.1
                     
 
                        1.2
                     
 
                        1.3
                     
 
                        1.4
                     
 
                        1.5
                     
 
                        1.5.3
                     
 
                        1.6
                     
 
                        1.6.3
                     
 
                        1.6.5
                     
 
                        1.7
                     
 
                        1.7.10
                     
 
                        1.8
                     
 
                        1.8.3
                     
 
                        1.9
                     
 
                        2.0
                     
 
                        2.1
                     
 
                        2.2
                     
 
                        2.3
                     
 
                        2.4
                     
 
                        2.5
                     
 
                        2.6
                     
 
                        2.7
                     
 
                        2.8
                     
 
                        2.9
                     
 
                        2.10
                     
 
                        2.10.2
                     
 
                        2.11
                     
 
                        2.11.1
                     
 
                        2.12
                     
 
                        2.13
                     
 
 
 
 Introduction 
 
 Commits with Git provide accountability by attributing authors with changes to code. Git offers multiple features for the specificity and security of commits. This topic explains and demonstrates proper practices and procedures in committing with Git. 
 
 
 
 
 
 Commits with Git provide accountability by attributing authors with changes to code. Git offers multiple features for the specificity and security of commits. This topic explains and demonstrates proper practices and procedures in committing with Git. 
 
 
 
   edit 
 share 
 request improvement 
   edit 
 move 
 delete topic 
 share 
 
 
 
 
 
                var ados = ados || {}; ados.run = ados.run || [];
                ados.run.push(function () { ados_add_placement(22,499571,"adzerk658383433",4).setZone(29); });
             
 
 
 
 
 This draft deletes the entire topic. 
 
 
 
 
 
 
 
 
                    Examples
                     
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 10 
 
 Stage and commit changes 
 
 
 
 
 
 10 
 
 
 
 
 
   
 The basics 
 After making changes to your source code, you should  stage  those changes with Git before you can commit them. 
 For example, if you change  README.md  and  program.py : 
 git add README.md program.py
 
 This tells git that you want to add the files to the next commit you do. 
 Then, commit your changes with 
 git commit
 
 Note that this will open a text editor, which  is often   vim . If you are not familiar with vim, you might want to know that you can press  i  to go into  insert  mode, write your commit message, then press  Esc  and  :wq  to save and quit. To avoid opening the text editor, simply include the  -m  flag with your message 
 git commit -m "Commit message here"
 
 Commit messages often follow some specific formatting rules, see  Good commit messages  for more information. 
 
 Shortcuts 
 If you have changed a lot of files in the directory, rather than listing each one of them, you could use: 
 git add --all        # equivalent to "git add -a"
 
 Or to add all changes,  not including files that have been deleted , from the top-level directory and subdirectories: 
 git add .
 
 Or to only add files which are currently tracked ("update"): 
 git add -u
 
 If desired, review the staged changes: 
 git status           # display a list of changed files
git diff --cached    # shows staged changes inside staged files
 
 Finally, commit the changes: 
 git commit -m "Commit message here"
 
 Alternately, if you have only modified existing files or deleted files, and have not created any new ones, you can combine the actions of  git add  and  git commit  in a single command: 
 git commit -am "Commit message here"
 
 Note that this will stage  all  modified files in the same way as  git add --all . 
 
 Sensitive data 
 You should never commit any sensitive data, such as passwords or even private keys. If this case happens and the changes are already pushed to a central server, consider any sensitive data as compromised. Otherwise, it is possible to remove such data afterwards. A fast and easy solution is the usage of the "BFG Repo-Cleaner":  https://rtyley.github.io/bfg-repo-cleaner/ . 
 The command  bfg --replace-text passwords.txt my-repo.git  reads passwords out of the  passwords.txt  file and replaces these with  ***REMOVED*** . This operation considers all previous commits of the entire repository. 
 
 
 
 
 
 
 
 
 edited  May 27 at 10:55 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                    +5
                     
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 27 
 
 Good commit messages 
 
 
 
 
 
 27 
 
 
 It is important for someone traversing through the  git log  to easily understand what each commit was all about. Good commit messages usually include a number of a task or an issue in a tracker and a concise description of what has been done and why, and sometimes also how it has been done. 
 Better messages may look like: 
 TASK-123: Implement login through OAuth
TASK-124: Add auto minification of JS/CSS files
TASK-125: Fix minifier error when name > 200 chars
 
 Whereas the following messages would not be quite as useful: 
 fix                         // What has been fixed?
just a bit of a change      // What has changed?
TASK-371                    // No description at all, reader will need to look at the tracker themselves for an explanation
Implemented IFoo in IBar    // Why it was needed?
 
 A way to test if a commit message is written in the correct mood is to replace the blank with the message and see if it makes sense: 
 If I add this commit, I will ___ to my repository. 
 The seven rules of a great git commit message 
 
 Separate the subject line from body with a blank line 
 Limit the subject line to 50 characters 
 Capitalize the subject line 
 Do not end the subject line with a period 
 Use the  imperative mood  in the subject line 
 Manually wrap each line of the body at 72 characters 
 Use the body to explain  what  and  why  instead of  how 
 
 7 rules from Chris Beam's blog . 
 
 
 
 
 
 
 
 edited  Feb 23 at 6:27 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                    +2
                     
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
   
 
                var ados = ados || {}; ados.run = ados.run || [];
                ados.run.push(function () { ados_add_placement(22,499571,"adzerk1876510982",4).setZone(30); });
             
 
 
   
 
 
 
 
 
 
 
 
 19 
 
 Amending a commit 
 
 
 
 
 
 19 
 
 
 If your  latest commit is not published yet  (not pushed to an upstream repository) then you can amend your commit. 
 git commit --amend
 
 This will put the currently staged changes onto the previous commit. 
 Note:  This can also be used to edit an incorrect commit message. It will bring up the default editor (usually  vi  /  vim  /  emacs ) and allow you to change the prior message. 
 To specify the commit message inline: 
 git commit --amend -m "New commit message"
 
 Or to use the previous commit message without changing it: 
 git commit --amend --no-edit
 
 Amending updates the commit date but leaves the author date untouched. You can tell git to refresh the information. 
 git commit --amend --reset-author
 
 You can also change the author of the commit with: 
 git commit --amend --author "New Author <email@address.com>"
 
 Note:  Be aware that amending the most recent commit replaces it entirely and the previous commit is removed from the branch's history. This should be kept in mind when working with public repositories and on branches with other collaborators. 
 This means that if the earlier commit had already been pushed, after amending it you will have to  push --force . 
 
 
 
 
 
 
 
 edited  Sep 8 '16 at 17:11 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                    +4
                     
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 14 
 
 Committing without opening an editor 
 
 
 
 
 
 14 
 
 
 Git will usually open an editor (like  vim  or  emacs ) when you run  git commit . Pass the  -m  option to specify a message from the command line: 
 git commit -m "Commit message here"
 
 Your commit message can go over multiple lines: 
 git commit -m "Commit 'subject line' message here

More detailed description follows here (after a blank line)."
 
 Alternatively, you can pass in multiple  -m  arguments: 
 git commit -m "Commit summary" -m "More detailed description follows here"
 
 See  How to Write a Git Commit Message . 
 Udacity Git Commit Message Style Guide 
 
 
 
 
 
 
 
 edited  Jul 30 '16 at 17:38 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 6 
 
 Committing changes directly 
 
 
 
 
 
 6 
 
 
 Usually, you have to use  git add  or  git rm  to add changes to the index before you can  git commit  them. Pass the  -a  or  --all  option to automatically add every change (to tracked files) to the index, including removals: 
 git commit -a 
 
 If you would like to also add a commit message you would do: 
 git commit -a -m "your commit message goes here"
 
 Also, you can join two flags: 
 git commit -am "your commit message goes here"
 
 You don't necessarily need to commit all files at once. Omit the  -a  or  --all  flag and  specify which file you want to commit directly: 
 git commit path/to/a/file -m "your commit message goes here"
 
 For directly committing more than one specific file, you can specify one or multiple files, directories and patterns as well: 
 git commit path/to/a/file path/to/a/folder/* path/to/b/file -m "your commit message goes here"
 
 
 
 
 
 
 
 
 edited  Sep 15 '16 at 19:48 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                    +1
                     
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 2 
 
 Committing on behalf of someone else 
 
 
 
 
 
 2 
 
 
 If someone else wrote the code you are committing, you can give them credit with the  --author  option: 
 git commit -m "msg" --author "John Smith <johnsmith@example.com>"
 
 You can also provide a pattern, which Git will use to search for previous authors: 
 git commit -m "msg" --author "John"
 
 In this case, the author information from the most recent commit with an author containing "John" will be used. 
 On GitHub, commits made in either of the above ways will show a large author's thumbnail, with the committer's smaller and in front: 
 
 
 
 
 
 
 
 
 created  Jul 21 '16 at 18:34 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 2 
 
 Selecting which lines should be staged for committing 
 
 
 
 
 
 2 
 
 
 Suppose you have many changes in one or more files but from each file you only want to commit some of the changes, you can select the desired changes using: 
 git add -p
 
 or 
 git add -p [file]
 
 Each of your changes will be displayed individually, and for each change you will be prompted to choose one of he following options: 
 y - Yes, add this hunk

n - No, don’t add this hunk

d - No, don’t add this hunk, or any other remaining hunks for this file.
    Useful if you’ve already added what you want to, and want to skip over the rest.

s - Split the hunk into smaller hunks, if possible

e - Manually edit the hunk.  This is probably the most powerful option.
    It will open the hunk in a text editor and you can edit it as needed.
 
 This will stage the parts of the files you choose. Then you can commit all the staged changes like this: 
 git commit -m 'Commit Message'
 
 The changes that were not staged or committed will still appear in your working files, and can be committed later if required.  Or if the remaining changes are unwanted, they can be discarded with: 
 git reset --hard
 
 Apart from breaking up a big change into smaller commits, this approach is also useful for  reviewing  what you are about to commit. By individually confirming each change, you have an opportunity to check what you wrote, and can avoid accidentally staging unwanted code such as println/logging statements. 
 
 
 
 
 
 
 
 edited  Dec 11 '16 at 14:47 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 1 
 
 Commiting changes in specific files 
 
 
 
 
 
 1 
 
 
 You can commit changes made to specific files and skip staging them using  git add : 
 git commit file1.c file2.h
 
 Or you can first stage the files: 
 git add file1.c file2.h
 
 and commit them later: 
 git commit
 
 
 
 
 
 
 
 
 edited  Jul 28 '16 at 15:28 
 
 
 
 
 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 1 
 
 Creating an empty commit 
 
 
 
 
 
 1 
 
 
 Generally speaking, empty commits (or commits with state that is identical to the parent) is an error. 
 However, when testing build hooks, CI systems, and other systems that trigger off a commit, it's handy to be able to easily create commits without having to edit/touch a dummy file. 
 The  --allow-empty  commit will bypass the check. 
 git commit -m "This is a blank commit" --allow-empty 
 
 
 
 
 
 
 
 edited  Jul 22 '16 at 12:44 
 
 
 
 
 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 1 
 
 GPG signing commits 
 
 
 
 
 
 1 
 
 
 
 
 Determine your key ID 
 gpg --list-secret-keys --keyid-format LONG

/Users/davidcondrey/.gnupg/secring.gpg
--------------------------------------
sec   2048R/YOUR-16-DIGIT-KEY-ID YYYY-MM-DD [expires: YYYY-MM-DD]
 
 Your ID is a alphanumeric 16-digit code following the first forward-slash. 
 
 
 Define your key ID in your git config 
 git config --global user.signingkey YOUR-16-DIGIT-KEY-ID
 
 
 
 As of version 1.7.9, git commit accepts the -S option to attach a signature to your commits.  Using this option will prompt for your GPG passphrase and will add your signature to the commit log. 
 git commit -S -m "Your commit message"
 
 
 
 
 
 
 
 
 
 
 created  Aug 11 '16 at 0:23 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 0 
 
 Amending the author of a commit 
 
 
 
 
 
 0 
 
 
 If you make a commit as the wrong author, you can change it, and then amend 
 git config user.name "Full Name"
git config user.email "email@example.com"

git commit --amend --reset-author
 
 
 
 
 
 
 
 
 created  Jul 29 '16 at 9:48 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 0 
 
 Amending the time of a commit 
 
 
 
 
 
 0 
 
 
 You cam amend the time of a commit using 
 git commit --amend --date="Thu Jul 28 11:30 2016 -0400"
 
 or even 
 git commit --amend --date="now"
 
 
 
 
 
 
 
 
 created  Jul 29 '16 at 9:48 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 
 
 
 
 
 
 0 
 
 Committing at a specific date 
 
 
 
 
 
 0 
 
 
 git commit -m 'Fix UI bug' --date 2016-07-01
 
 The  --date  parameter sets the  author date .
This date will appear in the standard output of  git log , for example. 
 To force the  commit date  too: 
 GIT_COMMITTER_DATE=2016-07-01 git commit -m 'Fix UI bug' --date 2016-07-01
 
 The date parameter accepts the flexible formats as supported by GNU date, for example: 
 git commit -m 'Fix UI bug' --date yesterday
git commit -m 'Fix UI bug' --date '3 days ago'
git commit -m 'Fix UI bug' --date '3 hours ago'
 
 When the date doesn't specify time, the current time will be used and only the date will be overridden. 
 
 
 
 
 
 
 
 created  Jul 22 '16 at 0:23 
 
 
 
 
 
 
 
 
   
 
 
   edit 
 share 
 discuss 
 request improvement 
   edit 
 move example 
 delete example 
 
 
 
 
 
 
 + 
            Add Example
         
 
 
 
        Please consider making a request to improve this example.
         Request Improvement 
 
 
 
 
 
 Syntax 
 
 git commit [flags] 
 
 
 
 
   edit 
 share 
 
   edit 
 
 
 
 
 
 
 Parameters 
 Parameter              Details --message, -m Message to include in the commit. Specifying this parameter bypasses Git's normal behavior of opening an editor. --amend Specify that the changes currently staged should be added (amended) to the  previous  commit. Be careful, this can rewrite history! --no-edit Use the selected commit message without launching an editor. For example,  git commit --amend --no-edit  amends a commit without changing its commit message. --all, -a Commit all changes, including changes that aren't yet staged. --date Manually set the date that will be associated with the commit. --only Commit only the paths specified. This will not commit what you currently have staged unless told to do so. --patch, -p Use the interactive patch selection interface to chose which changes to commit. --help Displays the man page for  git commit -S[keyid], -S --gpg-sign[=keyid], -S --no-gpg-sign Sign commit, GPG-sign commit, countermand  commit.gpgSign  configuration variable -n, --no-verify This option bypasses the pre-commit and commit-msg hooks. See also  Hooks 
 
 
 
   edit 
 share 
 
   edit 
 
 
 
 
 
 
 Remarks 
 
 
 Remarks 
 
 
 
   add remarks 
 
 
 
 
 
 
 
 edited  May 27 at 10:55 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                    +32
                     
 
 
   
 
 Still have a question about Committing? 
 Ask Question 
 
 
 
 
 Topic Outline 
 
 Introduction 
 
 
 13 Examples 
 
 
 
 
 Good commit messages 
 
 
 Amending a commit 
 
 
 Committing without opening an editor 
 
 
 Stage and commit changes 
 
 
 Committing changes directly 
 
 
 Committing on behalf of someone else 
 
 
 Selecting which lines should be staged for committing 
 
 
 Commiting changes in specific files 
 
 
 Creating an empty commit 
 
 
 GPG signing commits 
 
 
 Amending the author of a commit 
 
 
 Amending the time of a commit 
 
 
 Committing at a specific date 
 
 Show more 
 
 Syntax 
 Parameters 
 
 
 
                    Blog
                 
 
 
 
 
   
 
 
 Trends in Government Software Developers 
 
 
 
 
 
 
   
 
 
 Introducing Channels: Private Q&A for Your Team 
 
 
 
 
   
 
                var ados = ados || {}; ados.run = ados.run || [];
                ados.run.push(function () { ados_add_placement(22,499571,"adzerk1227099300",5).setZone(56016); });
             
 
 
 
 
        StackExchange.ready(function () { $.get('/documentation/git/ivc/323-636356032230541482:ycb1ichtuvip7c5ljol7hfyud54.gif?topicId=323'); });
     
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                    Topic Outline
                         
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 Save Draft 
 Discard 
 
 
 
 
 Sign up or log in 
 Save edit as a guest 
 Join Stack Overflow 
 
 
 
 Using Google 
 
 
 Using Facebook 
 
 
 Using Email and Password 
 
 
 
 
 Name 
 
 
 
 Email 
 
 Save Draft 
 
 
 
 
 We recognize you from another Stack Exchange Network site! 
 Join and Save Draft 
 
 Discard Draft 
 
 
 
 
 
 
 
 
 
 
 
 
 
 Stack Overflow 
 
 Questions 
 Jobs 
 Developer Jobs Directory 
 Documentation 
 Help 
 Mobile 
 
 
 
 Stack Overflow  Business 
 
 Talent 
 Ads 
 Enterprise 
 Insights 
 
 
 
 Company 
 
 About 
 Press 
 Work Here 
 Legal 
 Privacy Policy 
 Contact Us 
 
 
 
 
 
 Stack Exchange  Network 
 
 Technology 
 Life / Arts 
 Culture / Recreation 
 Science 
 Other 
 
 
 
 
 
 Stack Overflow 
 Server Fault 
 Super User 
 Web Applications 
 Ask Ubuntu 
 Webmasters 
 Game Development 
 
 TeX - LaTeX 
 Software Engineering 
 Unix & Linux 
 Ask Different (Apple) 
 WordPress Development 
 Geographic Information Systems 
 Electrical Engineering 
 
 Android Enthusiasts 
 Information Security 
 Database Administrators 
 Drupal Answers 
 SharePoint 
 User Experience 
 Data Science 
 
 Mathematica 
 Salesforce 
 ExpressionEngine® Answers 
 Blender 
 Network Engineering 
 Cryptography 
 Code Review 
 
 Magento 
 Software Recommendations 
 Signal Processing 
 Emacs 
 Raspberry Pi 
 Programming Puzzles & Code Golf 
 Ethereum 
 
 
 
                            more (27)
                         
 
 
 
 
 
 
 Photography 
 Science Fiction & Fantasy 
 Graphic Design 
 Movies & TV 
 Music: Practice & Theory 
 Worldbuilding 
 Seasoned Advice (cooking) 
 
 Home Improvement 
 Personal Finance & Money 
 Academia 
 Law 
 
 
 
                            more (16)
                         
 
 
 
 
 
 
 English Language & Usage 
 Skeptics 
 Mi Yodeya (Judaism) 
 Travel 
 Christianity 
 English Language Learners 
 Japanese Language 
 
 Arqade (gaming) 
 Bicycles 
 Role-playing Games 
 Anime & Manga 
 Puzzling 
 Motor Vehicle Maintenance & Repair 
 
 
 
                            more (32)
                         
 
 
 
 
 
 
 MathOverflow 
 Mathematics 
 Cross Validated (stats) 
 Theoretical Computer Science 
 Physics 
 Chemistry 
 Biology 
 
 Computer Science 
 Philosophy 
 
 
 
                            more (10)
                         
 
 
 
 
 
 
 Meta Stack Exchange 
 Stack Apps 
 API 
 Data 
 Area 51 
 
 
 
 
 
 Blog 
 Facebook 
 Twitter 
 LinkedIn 
 
 
 
                                    site design / logo © 2017 Stack Exchange Inc; user contributions licensed under  cc by-sa 3.0 
                                    with  attribution required .
                                     rev 2017.7.13.1278 
 
 
 
 
 
 
 
 
 Stack Overflow works best with JavaScript enabled
             
 
 
 var z=document.createElement("script");z.type="text/javascript",z.async=!0,z.src="https://static.adzerk.net/ados.js";var s=document.getElementsByTagName("script")[0];s.parentNode.insertBefore(z,s); 
 
var ados = ados || {};
ados.run = ados.run || [];

 
 
            (function(i, s, o, g, r, a, m) {
                i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function() { (i[r].q = i[r].q || []).push(arguments) }, i[r].l = 1 * new Date(); a = s.createElement(o),
                m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m);
            })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');
                ga('create', 'UA-5620270-1');
                ga('create', 'UA-5620270-60', {name: 'pageData', sampleRate: 100 });
                ga('send', 'pageview');
                ga('pageData.send', 'pageview');
        var _qevents = _qevents || [],
            _comscore = _comscore || [];
        (function () {
            var ssl='https:'==document.location.protocol,
                s=document.getElementsByTagName('script')[0],
                qc=document.createElement('script');
                qc.async = true;
                qc.src = (ssl ? 'https://secure' : 'http://edge') + '.quantserve.com/quant.js';
                s.parentNode.insertBefore(qc, s);
                _qevents.push({ qacct: "p-c1rF4kxgLUzNc" });
                            var sc=document.createElement('script');
                sc.async=true;
                sc.src=(ssl?'https://sb':'http://b') + '.scorecardresearch.com/beacon.js';
                s.parentNode.insertBefore(sc, s);
                _comscore.push({ c1: "2", c2: "17440561" });
        })();

     
 
                
                (function(appendChild) {
                    Node.prototype.appendChild = function() {
                        var parent = this;
                        var newNode = arguments[0];
                        if (parent.nodeName === 'HEAD'
                            && newNode
                            && newNode.nodeName === 'SCRIPT'
                            && newNode.src) {
                            
                            window.setTimeout(function() {
                                var result = newNode.src.match(/^https:\/\/maps\.googleapis\.com\/maps\/api\/place\/js\/(\w+)Service\./i) || [];
                                var service = result[1];
                                if (service) {
                                    if (service === 'Autocompletion') service =  2;
                                    else if (service === 'Place') service = 1;
                                    else service = 0;
                                    StackExchange.using('gps', function() {
                                        StackExchange.gps.track('google_maps_places_api.call', { service: service });
                                    });
                                }
                            }, 0);
                        }
                        return appendChild.apply(this, arguments);
                    };
                })(Node.prototype.appendChild);
             
